{"ast":null,"code":"import defaultParams from './params.js';\nimport { capitalizeFirstLetter, warn } from './utils.js';\nconst swalStringParams = ['swal-title', 'swal-html', 'swal-footer'];\n\n/**\n * @param {SweetAlertOptions} params\n * @returns {SweetAlertOptions}\n */\nexport const getTemplateParams = params => {\n  /** @type {HTMLTemplateElement} */\n  const template = typeof params.template === 'string' ? document.querySelector(params.template) : params.template;\n  if (!template) {\n    return {};\n  }\n  /** @type {DocumentFragment} */\n  const templateContent = template.content;\n  showWarningsForElements(templateContent);\n  const result = Object.assign(getSwalParams(templateContent), getSwalFunctionParams(templateContent), getSwalButtons(templateContent), getSwalImage(templateContent), getSwalIcon(templateContent), getSwalInput(templateContent), getSwalStringParams(templateContent, swalStringParams));\n  return result;\n};\n\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\nconst getSwalParams = templateContent => {\n  const result = {};\n  /** @type {HTMLElement[]} */\n  const swalParams = Array.from(templateContent.querySelectorAll('swal-param'));\n  swalParams.forEach(param => {\n    showWarningsForAttributes(param, ['name', 'value']);\n    const paramName = param.getAttribute('name');\n    const value = param.getAttribute('value');\n    if (typeof defaultParams[paramName] === 'boolean') {\n      result[paramName] = value !== 'false';\n    } else if (typeof defaultParams[paramName] === 'object') {\n      result[paramName] = JSON.parse(value);\n    } else {\n      result[paramName] = value;\n    }\n  });\n  return result;\n};\n\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\nconst getSwalFunctionParams = templateContent => {\n  const result = {};\n  /** @type {HTMLElement[]} */\n  const swalFunctions = Array.from(templateContent.querySelectorAll('swal-function-param'));\n  swalFunctions.forEach(param => {\n    const paramName = param.getAttribute('name');\n    const value = param.getAttribute('value');\n    result[paramName] = new Function(`return ${value}`)();\n  });\n  return result;\n};\n\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\nconst getSwalButtons = templateContent => {\n  const result = {};\n  /** @type {HTMLElement[]} */\n  const swalButtons = Array.from(templateContent.querySelectorAll('swal-button'));\n  swalButtons.forEach(button => {\n    showWarningsForAttributes(button, ['type', 'color', 'aria-label']);\n    const type = button.getAttribute('type');\n    result[`${type}ButtonText`] = button.innerHTML;\n    result[`show${capitalizeFirstLetter(type)}Button`] = true;\n    if (button.hasAttribute('color')) {\n      result[`${type}ButtonColor`] = button.getAttribute('color');\n    }\n    if (button.hasAttribute('aria-label')) {\n      result[`${type}ButtonAriaLabel`] = button.getAttribute('aria-label');\n    }\n  });\n  return result;\n};\n\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\nconst getSwalImage = templateContent => {\n  const result = {};\n  /** @type {HTMLElement} */\n  const image = templateContent.querySelector('swal-image');\n  if (image) {\n    showWarningsForAttributes(image, ['src', 'width', 'height', 'alt']);\n    if (image.hasAttribute('src')) {\n      result.imageUrl = image.getAttribute('src');\n    }\n    if (image.hasAttribute('width')) {\n      result.imageWidth = image.getAttribute('width');\n    }\n    if (image.hasAttribute('height')) {\n      result.imageHeight = image.getAttribute('height');\n    }\n    if (image.hasAttribute('alt')) {\n      result.imageAlt = image.getAttribute('alt');\n    }\n  }\n  return result;\n};\n\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\nconst getSwalIcon = templateContent => {\n  const result = {};\n  /** @type {HTMLElement} */\n  const icon = templateContent.querySelector('swal-icon');\n  if (icon) {\n    showWarningsForAttributes(icon, ['type', 'color']);\n    if (icon.hasAttribute('type')) {\n      /** @type {SweetAlertIcon} */\n      // @ts-ignore\n      result.icon = icon.getAttribute('type');\n    }\n    if (icon.hasAttribute('color')) {\n      result.iconColor = icon.getAttribute('color');\n    }\n    result.iconHtml = icon.innerHTML;\n  }\n  return result;\n};\n\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\nconst getSwalInput = templateContent => {\n  const result = {};\n  /** @type {HTMLElement} */\n  const input = templateContent.querySelector('swal-input');\n  if (input) {\n    showWarningsForAttributes(input, ['type', 'label', 'placeholder', 'value']);\n    /** @type {SweetAlertInput} */\n    // @ts-ignore\n    result.input = input.getAttribute('type') || 'text';\n    if (input.hasAttribute('label')) {\n      result.inputLabel = input.getAttribute('label');\n    }\n    if (input.hasAttribute('placeholder')) {\n      result.inputPlaceholder = input.getAttribute('placeholder');\n    }\n    if (input.hasAttribute('value')) {\n      result.inputValue = input.getAttribute('value');\n    }\n  }\n  /** @type {HTMLElement[]} */\n  const inputOptions = Array.from(templateContent.querySelectorAll('swal-input-option'));\n  if (inputOptions.length) {\n    result.inputOptions = {};\n    inputOptions.forEach(option => {\n      showWarningsForAttributes(option, ['value']);\n      const optionValue = option.getAttribute('value');\n      const optionName = option.innerHTML;\n      result.inputOptions[optionValue] = optionName;\n    });\n  }\n  return result;\n};\n\n/**\n * @param {DocumentFragment} templateContent\n * @param {string[]} paramNames\n * @returns {SweetAlertOptions}\n */\nconst getSwalStringParams = (templateContent, paramNames) => {\n  const result = {};\n  for (const i in paramNames) {\n    const paramName = paramNames[i];\n    /** @type {HTMLElement} */\n    const tag = templateContent.querySelector(paramName);\n    if (tag) {\n      showWarningsForAttributes(tag, []);\n      result[paramName.replace(/^swal-/, '')] = tag.innerHTML.trim();\n    }\n  }\n  return result;\n};\n\n/**\n * @param {DocumentFragment} templateContent\n */\nconst showWarningsForElements = templateContent => {\n  const allowedElements = swalStringParams.concat(['swal-param', 'swal-function-param', 'swal-button', 'swal-image', 'swal-icon', 'swal-input', 'swal-input-option']);\n  Array.from(templateContent.children).forEach(el => {\n    const tagName = el.tagName.toLowerCase();\n    if (!allowedElements.includes(tagName)) {\n      warn(`Unrecognized element <${tagName}>`);\n    }\n  });\n};\n\n/**\n * @param {HTMLElement} el\n * @param {string[]} allowedAttributes\n */\nconst showWarningsForAttributes = (el, allowedAttributes) => {\n  Array.from(el.attributes).forEach(attribute => {\n    if (allowedAttributes.indexOf(attribute.name) === -1) {\n      warn([`Unrecognized attribute \"${attribute.name}\" on <${el.tagName.toLowerCase()}>.`, `${allowedAttributes.length ? `Allowed attributes are: ${allowedAttributes.join(', ')}` : 'To set the value, use HTML within the element.'}`]);\n    }\n  });\n};","map":{"version":3,"names":["defaultParams","capitalizeFirstLetter","warn","swalStringParams","getTemplateParams","params","template","document","querySelector","templateContent","content","showWarningsForElements","result","Object","assign","getSwalParams","getSwalFunctionParams","getSwalButtons","getSwalImage","getSwalIcon","getSwalInput","getSwalStringParams","swalParams","Array","from","querySelectorAll","forEach","param","showWarningsForAttributes","paramName","getAttribute","value","JSON","parse","swalFunctions","Function","swalButtons","button","type","innerHTML","hasAttribute","image","imageUrl","imageWidth","imageHeight","imageAlt","icon","iconColor","iconHtml","input","inputLabel","inputPlaceholder","inputValue","inputOptions","length","option","optionValue","optionName","paramNames","i","tag","replace","trim","allowedElements","concat","children","el","tagName","toLowerCase","includes","allowedAttributes","attributes","attribute","indexOf","name","join"],"sources":["C:/Users/LENOVO/Desktop/react project/Contact-form-email/frontend/node_modules/sweetalert2/src/utils/getTemplateParams.js"],"sourcesContent":["import defaultParams from './params.js'\nimport { capitalizeFirstLetter, warn } from './utils.js'\n\nconst swalStringParams = ['swal-title', 'swal-html', 'swal-footer']\n\n/**\n * @param {SweetAlertOptions} params\n * @returns {SweetAlertOptions}\n */\nexport const getTemplateParams = (params) => {\n  /** @type {HTMLTemplateElement} */\n  const template = typeof params.template === 'string' ? document.querySelector(params.template) : params.template\n  if (!template) {\n    return {}\n  }\n  /** @type {DocumentFragment} */\n  const templateContent = template.content\n\n  showWarningsForElements(templateContent)\n\n  const result = Object.assign(\n    getSwalParams(templateContent),\n    getSwalFunctionParams(templateContent),\n    getSwalButtons(templateContent),\n    getSwalImage(templateContent),\n    getSwalIcon(templateContent),\n    getSwalInput(templateContent),\n    getSwalStringParams(templateContent, swalStringParams)\n  )\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\nconst getSwalParams = (templateContent) => {\n  const result = {}\n  /** @type {HTMLElement[]} */\n  const swalParams = Array.from(templateContent.querySelectorAll('swal-param'))\n  swalParams.forEach((param) => {\n    showWarningsForAttributes(param, ['name', 'value'])\n    const paramName = param.getAttribute('name')\n    const value = param.getAttribute('value')\n    if (typeof defaultParams[paramName] === 'boolean') {\n      result[paramName] = value !== 'false'\n    } else if (typeof defaultParams[paramName] === 'object') {\n      result[paramName] = JSON.parse(value)\n    } else {\n      result[paramName] = value\n    }\n  })\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\nconst getSwalFunctionParams = (templateContent) => {\n  const result = {}\n  /** @type {HTMLElement[]} */\n  const swalFunctions = Array.from(templateContent.querySelectorAll('swal-function-param'))\n  swalFunctions.forEach((param) => {\n    const paramName = param.getAttribute('name')\n    const value = param.getAttribute('value')\n    result[paramName] = new Function(`return ${value}`)()\n  })\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\nconst getSwalButtons = (templateContent) => {\n  const result = {}\n  /** @type {HTMLElement[]} */\n  const swalButtons = Array.from(templateContent.querySelectorAll('swal-button'))\n  swalButtons.forEach((button) => {\n    showWarningsForAttributes(button, ['type', 'color', 'aria-label'])\n    const type = button.getAttribute('type')\n    result[`${type}ButtonText`] = button.innerHTML\n    result[`show${capitalizeFirstLetter(type)}Button`] = true\n    if (button.hasAttribute('color')) {\n      result[`${type}ButtonColor`] = button.getAttribute('color')\n    }\n    if (button.hasAttribute('aria-label')) {\n      result[`${type}ButtonAriaLabel`] = button.getAttribute('aria-label')\n    }\n  })\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\nconst getSwalImage = (templateContent) => {\n  const result = {}\n  /** @type {HTMLElement} */\n  const image = templateContent.querySelector('swal-image')\n  if (image) {\n    showWarningsForAttributes(image, ['src', 'width', 'height', 'alt'])\n    if (image.hasAttribute('src')) {\n      result.imageUrl = image.getAttribute('src')\n    }\n    if (image.hasAttribute('width')) {\n      result.imageWidth = image.getAttribute('width')\n    }\n    if (image.hasAttribute('height')) {\n      result.imageHeight = image.getAttribute('height')\n    }\n    if (image.hasAttribute('alt')) {\n      result.imageAlt = image.getAttribute('alt')\n    }\n  }\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\nconst getSwalIcon = (templateContent) => {\n  const result = {}\n  /** @type {HTMLElement} */\n  const icon = templateContent.querySelector('swal-icon')\n  if (icon) {\n    showWarningsForAttributes(icon, ['type', 'color'])\n    if (icon.hasAttribute('type')) {\n      /** @type {SweetAlertIcon} */\n      // @ts-ignore\n      result.icon = icon.getAttribute('type')\n    }\n    if (icon.hasAttribute('color')) {\n      result.iconColor = icon.getAttribute('color')\n    }\n    result.iconHtml = icon.innerHTML\n  }\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\nconst getSwalInput = (templateContent) => {\n  const result = {}\n  /** @type {HTMLElement} */\n  const input = templateContent.querySelector('swal-input')\n  if (input) {\n    showWarningsForAttributes(input, ['type', 'label', 'placeholder', 'value'])\n    /** @type {SweetAlertInput} */\n    // @ts-ignore\n    result.input = input.getAttribute('type') || 'text'\n    if (input.hasAttribute('label')) {\n      result.inputLabel = input.getAttribute('label')\n    }\n    if (input.hasAttribute('placeholder')) {\n      result.inputPlaceholder = input.getAttribute('placeholder')\n    }\n    if (input.hasAttribute('value')) {\n      result.inputValue = input.getAttribute('value')\n    }\n  }\n  /** @type {HTMLElement[]} */\n  const inputOptions = Array.from(templateContent.querySelectorAll('swal-input-option'))\n  if (inputOptions.length) {\n    result.inputOptions = {}\n    inputOptions.forEach((option) => {\n      showWarningsForAttributes(option, ['value'])\n      const optionValue = option.getAttribute('value')\n      const optionName = option.innerHTML\n      result.inputOptions[optionValue] = optionName\n    })\n  }\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n * @param {string[]} paramNames\n * @returns {SweetAlertOptions}\n */\nconst getSwalStringParams = (templateContent, paramNames) => {\n  const result = {}\n  for (const i in paramNames) {\n    const paramName = paramNames[i]\n    /** @type {HTMLElement} */\n    const tag = templateContent.querySelector(paramName)\n    if (tag) {\n      showWarningsForAttributes(tag, [])\n      result[paramName.replace(/^swal-/, '')] = tag.innerHTML.trim()\n    }\n  }\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n */\nconst showWarningsForElements = (templateContent) => {\n  const allowedElements = swalStringParams.concat([\n    'swal-param',\n    'swal-function-param',\n    'swal-button',\n    'swal-image',\n    'swal-icon',\n    'swal-input',\n    'swal-input-option',\n  ])\n  Array.from(templateContent.children).forEach((el) => {\n    const tagName = el.tagName.toLowerCase()\n    if (!allowedElements.includes(tagName)) {\n      warn(`Unrecognized element <${tagName}>`)\n    }\n  })\n}\n\n/**\n * @param {HTMLElement} el\n * @param {string[]} allowedAttributes\n */\nconst showWarningsForAttributes = (el, allowedAttributes) => {\n  Array.from(el.attributes).forEach((attribute) => {\n    if (allowedAttributes.indexOf(attribute.name) === -1) {\n      warn([\n        `Unrecognized attribute \"${attribute.name}\" on <${el.tagName.toLowerCase()}>.`,\n        `${\n          allowedAttributes.length\n            ? `Allowed attributes are: ${allowedAttributes.join(', ')}`\n            : 'To set the value, use HTML within the element.'\n        }`,\n      ])\n    }\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}