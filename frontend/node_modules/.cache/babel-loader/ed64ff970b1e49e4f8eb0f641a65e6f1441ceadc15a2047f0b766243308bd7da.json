{"ast":null,"code":"export const consolePrefix = 'SweetAlert2:';\n\n/**\n * Capitalize the first letter of a string\n *\n * @param {string} str\n * @returns {string}\n */\nexport const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);\n\n/**\n * Standardize console warnings\n *\n * @param {string | string[]} message\n */\nexport const warn = message => {\n  console.warn(`${consolePrefix} ${typeof message === 'object' ? message.join(' ') : message}`);\n};\n\n/**\n * Standardize console errors\n *\n * @param {string} message\n */\nexport const error = message => {\n  console.error(`${consolePrefix} ${message}`);\n};\n\n/**\n * Private global state for `warnOnce`\n *\n * @type {string[]}\n * @private\n */\nconst previousWarnOnceMessages = [];\n\n/**\n * Show a console warning, but only if it hasn't already been shown\n *\n * @param {string} message\n */\nexport const warnOnce = message => {\n  if (!previousWarnOnceMessages.includes(message)) {\n    previousWarnOnceMessages.push(message);\n    warn(message);\n  }\n};\n\n/**\n * Show a one-time console warning about deprecated params/methods\n *\n * @param {string} deprecatedParam\n * @param {string} useInstead\n */\nexport const warnAboutDeprecation = (deprecatedParam, useInstead) => {\n  warnOnce(`\"${deprecatedParam}\" is deprecated and will be removed in the next major release. Please use \"${useInstead}\" instead.`);\n};\n\n/**\n * If `arg` is a function, call it (with no arguments or context) and return the result.\n * Otherwise, just pass the value through\n *\n * @param {Function | any} arg\n * @returns {any}\n */\nexport const callIfFunction = arg => typeof arg === 'function' ? arg() : arg;\n\n/**\n * @param {any} arg\n * @returns {boolean}\n */\nexport const hasToPromiseFn = arg => arg && typeof arg.toPromise === 'function';\n\n/**\n * @param {any} arg\n * @returns {Promise<any>}\n */\nexport const asPromise = arg => hasToPromiseFn(arg) ? arg.toPromise() : Promise.resolve(arg);\n\n/**\n * @param {any} arg\n * @returns {boolean}\n */\nexport const isPromise = arg => arg && Promise.resolve(arg) === arg;","map":{"version":3,"names":["consolePrefix","capitalizeFirstLetter","str","charAt","toUpperCase","slice","warn","message","console","join","error","previousWarnOnceMessages","warnOnce","includes","push","warnAboutDeprecation","deprecatedParam","useInstead","callIfFunction","arg","hasToPromiseFn","toPromise","asPromise","Promise","resolve","isPromise"],"sources":["C:/Users/LENOVO/Desktop/react project/Contact-form-email/frontend/node_modules/sweetalert2/src/utils/utils.js"],"sourcesContent":["export const consolePrefix = 'SweetAlert2:'\n\n/**\n * Capitalize the first letter of a string\n *\n * @param {string} str\n * @returns {string}\n */\nexport const capitalizeFirstLetter = (str) => str.charAt(0).toUpperCase() + str.slice(1)\n\n/**\n * Standardize console warnings\n *\n * @param {string | string[]} message\n */\nexport const warn = (message) => {\n  console.warn(`${consolePrefix} ${typeof message === 'object' ? message.join(' ') : message}`)\n}\n\n/**\n * Standardize console errors\n *\n * @param {string} message\n */\nexport const error = (message) => {\n  console.error(`${consolePrefix} ${message}`)\n}\n\n/**\n * Private global state for `warnOnce`\n *\n * @type {string[]}\n * @private\n */\nconst previousWarnOnceMessages = []\n\n/**\n * Show a console warning, but only if it hasn't already been shown\n *\n * @param {string} message\n */\nexport const warnOnce = (message) => {\n  if (!previousWarnOnceMessages.includes(message)) {\n    previousWarnOnceMessages.push(message)\n    warn(message)\n  }\n}\n\n/**\n * Show a one-time console warning about deprecated params/methods\n *\n * @param {string} deprecatedParam\n * @param {string} useInstead\n */\nexport const warnAboutDeprecation = (deprecatedParam, useInstead) => {\n  warnOnce(\n    `\"${deprecatedParam}\" is deprecated and will be removed in the next major release. Please use \"${useInstead}\" instead.`\n  )\n}\n\n/**\n * If `arg` is a function, call it (with no arguments or context) and return the result.\n * Otherwise, just pass the value through\n *\n * @param {Function | any} arg\n * @returns {any}\n */\nexport const callIfFunction = (arg) => (typeof arg === 'function' ? arg() : arg)\n\n/**\n * @param {any} arg\n * @returns {boolean}\n */\nexport const hasToPromiseFn = (arg) => arg && typeof arg.toPromise === 'function'\n\n/**\n * @param {any} arg\n * @returns {Promise<any>}\n */\nexport const asPromise = (arg) => (hasToPromiseFn(arg) ? arg.toPromise() : Promise.resolve(arg))\n\n/**\n * @param {any} arg\n * @returns {boolean}\n */\nexport const isPromise = (arg) => arg && Promise.resolve(arg) === arg\n"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,cAAc;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAIC,GAAG,IAAKA,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,GAAG,CAACG,KAAK,CAAC,CAAC,CAAC;;AAExF;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,IAAI,GAAIC,OAAO,IAAK;EAC/BC,OAAO,CAACF,IAAI,CAAE,GAAEN,aAAc,IAAG,OAAOO,OAAO,KAAK,QAAQ,GAAGA,OAAO,CAACE,IAAI,CAAC,GAAG,CAAC,GAAGF,OAAQ,EAAC,CAAC;AAC/F,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,KAAK,GAAIH,OAAO,IAAK;EAChCC,OAAO,CAACE,KAAK,CAAE,GAAEV,aAAc,IAAGO,OAAQ,EAAC,CAAC;AAC9C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,wBAAwB,GAAG,EAAE;;AAEnC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAIL,OAAO,IAAK;EACnC,IAAI,CAACI,wBAAwB,CAACE,QAAQ,CAACN,OAAO,CAAC,EAAE;IAC/CI,wBAAwB,CAACG,IAAI,CAACP,OAAO,CAAC;IACtCD,IAAI,CAACC,OAAO,CAAC;EACf;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMQ,oBAAoB,GAAGA,CAACC,eAAe,EAAEC,UAAU,KAAK;EACnEL,QAAQ,CACL,IAAGI,eAAgB,8EAA6EC,UAAW,YAC9G,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAIC,GAAG,IAAM,OAAOA,GAAG,KAAK,UAAU,GAAGA,GAAG,CAAC,CAAC,GAAGA,GAAI;;AAEhF;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAID,GAAG,IAAKA,GAAG,IAAI,OAAOA,GAAG,CAACE,SAAS,KAAK,UAAU;;AAEjF;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAIH,GAAG,IAAMC,cAAc,CAACD,GAAG,CAAC,GAAGA,GAAG,CAACE,SAAS,CAAC,CAAC,GAAGE,OAAO,CAACC,OAAO,CAACL,GAAG,CAAE;;AAEhG;AACA;AACA;AACA;AACA,OAAO,MAAMM,SAAS,GAAIN,GAAG,IAAKA,GAAG,IAAII,OAAO,CAACC,OAAO,CAACL,GAAG,CAAC,KAAKA,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}