{"ast":null,"code":"import { handleAwaitingPromise } from './instanceMethods/close.js';\nimport privateProps from './privateProps.js';\nimport { showLoading } from './staticMethods/showLoading.js';\nimport { DismissReason } from './utils/DismissReason.js';\nimport { isVisible } from './utils/dom/domUtils.js';\nimport { getDenyButton, getValidationMessage } from './utils/dom/getters.js';\nimport { getInputValue } from './utils/dom/inputUtils.js';\nimport { asPromise, capitalizeFirstLetter, error } from './utils/utils.js';\n\n/**\n * @param {SweetAlert} instance\n */\nexport const handleConfirmButtonClick = instance => {\n  const innerParams = privateProps.innerParams.get(instance);\n  instance.disableButtons();\n  if (innerParams.input) {\n    handleConfirmOrDenyWithInput(instance, 'confirm');\n  } else {\n    confirm(instance, true);\n  }\n};\n\n/**\n * @param {SweetAlert} instance\n */\nexport const handleDenyButtonClick = instance => {\n  const innerParams = privateProps.innerParams.get(instance);\n  instance.disableButtons();\n  if (innerParams.returnInputValueOnDeny) {\n    handleConfirmOrDenyWithInput(instance, 'deny');\n  } else {\n    deny(instance, false);\n  }\n};\n\n/**\n * @param {SweetAlert} instance\n * @param {Function} dismissWith\n */\nexport const handleCancelButtonClick = (instance, dismissWith) => {\n  instance.disableButtons();\n  dismissWith(DismissReason.cancel);\n};\n\n/**\n * @param {SweetAlert} instance\n * @param {'confirm' | 'deny'} type\n */\nconst handleConfirmOrDenyWithInput = (instance, type) => {\n  const innerParams = privateProps.innerParams.get(instance);\n  if (!innerParams.input) {\n    error(`The \"input\" parameter is needed to be set when using returnInputValueOn${capitalizeFirstLetter(type)}`);\n    return;\n  }\n  const inputValue = getInputValue(instance, innerParams);\n  if (innerParams.inputValidator) {\n    handleInputValidator(instance, inputValue, type);\n  } else if (!instance.getInput().checkValidity()) {\n    instance.enableButtons();\n    instance.showValidationMessage(innerParams.validationMessage);\n  } else if (type === 'deny') {\n    deny(instance, inputValue);\n  } else {\n    confirm(instance, inputValue);\n  }\n};\n\n/**\n * @param {SweetAlert} instance\n * @param {string | number | File | FileList | null} inputValue\n * @param {'confirm' | 'deny'} type\n */\nconst handleInputValidator = (instance, inputValue, type) => {\n  const innerParams = privateProps.innerParams.get(instance);\n  instance.disableInput();\n  const validationPromise = Promise.resolve().then(() => asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage)));\n  validationPromise.then(validationMessage => {\n    instance.enableButtons();\n    instance.enableInput();\n    if (validationMessage) {\n      instance.showValidationMessage(validationMessage);\n    } else if (type === 'deny') {\n      deny(instance, inputValue);\n    } else {\n      confirm(instance, inputValue);\n    }\n  });\n};\n\n/**\n * @param {SweetAlert} instance\n * @param {any} value\n */\nconst deny = (instance, value) => {\n  const innerParams = privateProps.innerParams.get(instance || this);\n  if (innerParams.showLoaderOnDeny) {\n    showLoading(getDenyButton());\n  }\n  if (innerParams.preDeny) {\n    instance.isAwaitingPromise = true; // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preDeny's promise is received\n    const preDenyPromise = Promise.resolve().then(() => asPromise(innerParams.preDeny(value, innerParams.validationMessage)));\n    preDenyPromise.then(preDenyValue => {\n      if (preDenyValue === false) {\n        instance.hideLoading();\n        handleAwaitingPromise(instance);\n      } else {\n        instance.close({\n          isDenied: true,\n          value: typeof preDenyValue === 'undefined' ? value : preDenyValue\n        });\n      }\n    }).catch(error => rejectWith(instance || this, error));\n  } else {\n    instance.close({\n      isDenied: true,\n      value\n    });\n  }\n};\n\n/**\n * @param {SweetAlert} instance\n * @param {any} value\n */\nconst succeedWith = (instance, value) => {\n  instance.close({\n    isConfirmed: true,\n    value\n  });\n};\n\n/**\n *\n * @param {SweetAlert} instance\n * @param {string} error\n */\nconst rejectWith = (instance, error) => {\n  instance.rejectPromise(error);\n};\n\n/**\n *\n * @param {SweetAlert} instance\n * @param {any} value\n */\nconst confirm = (instance, value) => {\n  const innerParams = privateProps.innerParams.get(instance || this);\n  if (innerParams.showLoaderOnConfirm) {\n    showLoading();\n  }\n  if (innerParams.preConfirm) {\n    instance.resetValidationMessage();\n    instance.isAwaitingPromise = true; // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preConfirm's promise is received\n    const preConfirmPromise = Promise.resolve().then(() => asPromise(innerParams.preConfirm(value, innerParams.validationMessage)));\n    preConfirmPromise.then(preConfirmValue => {\n      if (isVisible(getValidationMessage()) || preConfirmValue === false) {\n        instance.hideLoading();\n        handleAwaitingPromise(instance);\n      } else {\n        succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue);\n      }\n    }).catch(error => rejectWith(instance || this, error));\n  } else {\n    succeedWith(instance, value);\n  }\n};","map":{"version":3,"names":["handleAwaitingPromise","privateProps","showLoading","DismissReason","isVisible","getDenyButton","getValidationMessage","getInputValue","asPromise","capitalizeFirstLetter","error","handleConfirmButtonClick","instance","innerParams","get","disableButtons","input","handleConfirmOrDenyWithInput","confirm","handleDenyButtonClick","returnInputValueOnDeny","deny","handleCancelButtonClick","dismissWith","cancel","type","inputValue","inputValidator","handleInputValidator","getInput","checkValidity","enableButtons","showValidationMessage","validationMessage","disableInput","validationPromise","Promise","resolve","then","enableInput","value","showLoaderOnDeny","preDeny","isAwaitingPromise","preDenyPromise","preDenyValue","hideLoading","close","isDenied","catch","rejectWith","succeedWith","isConfirmed","rejectPromise","showLoaderOnConfirm","preConfirm","resetValidationMessage","preConfirmPromise","preConfirmValue"],"sources":["C:/Users/LENOVO/Desktop/react project/Contact-form-email/frontend/node_modules/sweetalert2/src/buttons-handlers.js"],"sourcesContent":["import { handleAwaitingPromise } from './instanceMethods/close.js'\nimport privateProps from './privateProps.js'\nimport { showLoading } from './staticMethods/showLoading.js'\nimport { DismissReason } from './utils/DismissReason.js'\nimport { isVisible } from './utils/dom/domUtils.js'\nimport { getDenyButton, getValidationMessage } from './utils/dom/getters.js'\nimport { getInputValue } from './utils/dom/inputUtils.js'\nimport { asPromise, capitalizeFirstLetter, error } from './utils/utils.js'\n\n/**\n * @param {SweetAlert} instance\n */\nexport const handleConfirmButtonClick = (instance) => {\n  const innerParams = privateProps.innerParams.get(instance)\n  instance.disableButtons()\n  if (innerParams.input) {\n    handleConfirmOrDenyWithInput(instance, 'confirm')\n  } else {\n    confirm(instance, true)\n  }\n}\n\n/**\n * @param {SweetAlert} instance\n */\nexport const handleDenyButtonClick = (instance) => {\n  const innerParams = privateProps.innerParams.get(instance)\n  instance.disableButtons()\n  if (innerParams.returnInputValueOnDeny) {\n    handleConfirmOrDenyWithInput(instance, 'deny')\n  } else {\n    deny(instance, false)\n  }\n}\n\n/**\n * @param {SweetAlert} instance\n * @param {Function} dismissWith\n */\nexport const handleCancelButtonClick = (instance, dismissWith) => {\n  instance.disableButtons()\n  dismissWith(DismissReason.cancel)\n}\n\n/**\n * @param {SweetAlert} instance\n * @param {'confirm' | 'deny'} type\n */\nconst handleConfirmOrDenyWithInput = (instance, type) => {\n  const innerParams = privateProps.innerParams.get(instance)\n  if (!innerParams.input) {\n    error(`The \"input\" parameter is needed to be set when using returnInputValueOn${capitalizeFirstLetter(type)}`)\n    return\n  }\n  const inputValue = getInputValue(instance, innerParams)\n  if (innerParams.inputValidator) {\n    handleInputValidator(instance, inputValue, type)\n  } else if (!instance.getInput().checkValidity()) {\n    instance.enableButtons()\n    instance.showValidationMessage(innerParams.validationMessage)\n  } else if (type === 'deny') {\n    deny(instance, inputValue)\n  } else {\n    confirm(instance, inputValue)\n  }\n}\n\n/**\n * @param {SweetAlert} instance\n * @param {string | number | File | FileList | null} inputValue\n * @param {'confirm' | 'deny'} type\n */\nconst handleInputValidator = (instance, inputValue, type) => {\n  const innerParams = privateProps.innerParams.get(instance)\n  instance.disableInput()\n  const validationPromise = Promise.resolve().then(() =>\n    asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage))\n  )\n  validationPromise.then((validationMessage) => {\n    instance.enableButtons()\n    instance.enableInput()\n    if (validationMessage) {\n      instance.showValidationMessage(validationMessage)\n    } else if (type === 'deny') {\n      deny(instance, inputValue)\n    } else {\n      confirm(instance, inputValue)\n    }\n  })\n}\n\n/**\n * @param {SweetAlert} instance\n * @param {any} value\n */\nconst deny = (instance, value) => {\n  const innerParams = privateProps.innerParams.get(instance || this)\n\n  if (innerParams.showLoaderOnDeny) {\n    showLoading(getDenyButton())\n  }\n\n  if (innerParams.preDeny) {\n    instance.isAwaitingPromise = true // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preDeny's promise is received\n    const preDenyPromise = Promise.resolve().then(() =>\n      asPromise(innerParams.preDeny(value, innerParams.validationMessage))\n    )\n    preDenyPromise\n      .then((preDenyValue) => {\n        if (preDenyValue === false) {\n          instance.hideLoading()\n          handleAwaitingPromise(instance)\n        } else {\n          instance.close({ isDenied: true, value: typeof preDenyValue === 'undefined' ? value : preDenyValue })\n        }\n      })\n      .catch((error) => rejectWith(instance || this, error))\n  } else {\n    instance.close({ isDenied: true, value })\n  }\n}\n\n/**\n * @param {SweetAlert} instance\n * @param {any} value\n */\nconst succeedWith = (instance, value) => {\n  instance.close({ isConfirmed: true, value })\n}\n\n/**\n *\n * @param {SweetAlert} instance\n * @param {string} error\n */\nconst rejectWith = (instance, error) => {\n  instance.rejectPromise(error)\n}\n\n/**\n *\n * @param {SweetAlert} instance\n * @param {any} value\n */\nconst confirm = (instance, value) => {\n  const innerParams = privateProps.innerParams.get(instance || this)\n\n  if (innerParams.showLoaderOnConfirm) {\n    showLoading()\n  }\n\n  if (innerParams.preConfirm) {\n    instance.resetValidationMessage()\n    instance.isAwaitingPromise = true // Flagging the instance as awaiting a promise so it's own promise's reject/resolve methods doesn't get destroyed until the result from this preConfirm's promise is received\n    const preConfirmPromise = Promise.resolve().then(() =>\n      asPromise(innerParams.preConfirm(value, innerParams.validationMessage))\n    )\n    preConfirmPromise\n      .then((preConfirmValue) => {\n        if (isVisible(getValidationMessage()) || preConfirmValue === false) {\n          instance.hideLoading()\n          handleAwaitingPromise(instance)\n        } else {\n          succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue)\n        }\n      })\n      .catch((error) => rejectWith(instance || this, error))\n  } else {\n    succeedWith(instance, value)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}