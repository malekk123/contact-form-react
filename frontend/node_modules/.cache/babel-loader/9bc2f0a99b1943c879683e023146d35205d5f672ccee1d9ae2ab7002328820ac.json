{"ast":null,"code":"import globalState from '../globalState.js';\nimport privateMethods from '../privateMethods.js';\nimport privateProps from '../privateProps.js';\n\n/**\n * Dispose the current SweetAlert2 instance\n */\nexport function _destroy() {\n  const domCache = privateProps.domCache.get(this);\n  const innerParams = privateProps.innerParams.get(this);\n  if (!innerParams) {\n    disposeWeakMaps(this); // The WeakMaps might have been partly destroyed, we must recall it to dispose any remaining WeakMaps #2335\n    return; // This instance has already been destroyed\n  }\n\n  // Check if there is another Swal closing\n  if (domCache.popup && globalState.swalCloseEventFinishedCallback) {\n    globalState.swalCloseEventFinishedCallback();\n    delete globalState.swalCloseEventFinishedCallback;\n  }\n  if (typeof innerParams.didDestroy === 'function') {\n    innerParams.didDestroy();\n  }\n  disposeSwal(this);\n}\n\n/**\n * @param {SweetAlert} instance\n */\nconst disposeSwal = instance => {\n  disposeWeakMaps(instance);\n  // Unset this.params so GC will dispose it (#1569)\n  delete instance.params;\n  // Unset globalState props so GC will dispose globalState (#1569)\n  delete globalState.keydownHandler;\n  delete globalState.keydownTarget;\n  // Unset currentInstance\n  delete globalState.currentInstance;\n};\n\n/**\n * @param {SweetAlert} instance\n */\nconst disposeWeakMaps = instance => {\n  // If the current instance is awaiting a promise result, we keep the privateMethods to call them once the promise result is retrieved #2335\n  if (instance.isAwaitingPromise) {\n    unsetWeakMaps(privateProps, instance);\n    instance.isAwaitingPromise = true;\n  } else {\n    unsetWeakMaps(privateMethods, instance);\n    unsetWeakMaps(privateProps, instance);\n    delete instance.isAwaitingPromise;\n    // Unset instance methods\n    delete instance.disableButtons;\n    delete instance.enableButtons;\n    delete instance.getInput;\n    delete instance.disableInput;\n    delete instance.enableInput;\n    delete instance.hideLoading;\n    delete instance.disableLoading;\n    delete instance.showValidationMessage;\n    delete instance.resetValidationMessage;\n    delete instance.close;\n    delete instance.closePopup;\n    delete instance.closeModal;\n    delete instance.closeToast;\n    delete instance.rejectPromise;\n    delete instance.update;\n    delete instance._destroy;\n  }\n};\n\n/**\n * @param {object} obj\n * @param {SweetAlert} instance\n */\nconst unsetWeakMaps = (obj, instance) => {\n  for (const i in obj) {\n    obj[i].delete(instance);\n  }\n};","map":{"version":3,"names":["globalState","privateMethods","privateProps","_destroy","domCache","get","innerParams","disposeWeakMaps","popup","swalCloseEventFinishedCallback","didDestroy","disposeSwal","instance","params","keydownHandler","keydownTarget","currentInstance","isAwaitingPromise","unsetWeakMaps","disableButtons","enableButtons","getInput","disableInput","enableInput","hideLoading","disableLoading","showValidationMessage","resetValidationMessage","close","closePopup","closeModal","closeToast","rejectPromise","update","obj","i","delete"],"sources":["C:/Users/LENOVO/Desktop/react project/Contact-form-email/frontend/node_modules/sweetalert2/src/instanceMethods/_destroy.js"],"sourcesContent":["import globalState from '../globalState.js'\nimport privateMethods from '../privateMethods.js'\nimport privateProps from '../privateProps.js'\n\n/**\n * Dispose the current SweetAlert2 instance\n */\nexport function _destroy() {\n  const domCache = privateProps.domCache.get(this)\n  const innerParams = privateProps.innerParams.get(this)\n\n  if (!innerParams) {\n    disposeWeakMaps(this) // The WeakMaps might have been partly destroyed, we must recall it to dispose any remaining WeakMaps #2335\n    return // This instance has already been destroyed\n  }\n\n  // Check if there is another Swal closing\n  if (domCache.popup && globalState.swalCloseEventFinishedCallback) {\n    globalState.swalCloseEventFinishedCallback()\n    delete globalState.swalCloseEventFinishedCallback\n  }\n\n  if (typeof innerParams.didDestroy === 'function') {\n    innerParams.didDestroy()\n  }\n  disposeSwal(this)\n}\n\n/**\n * @param {SweetAlert} instance\n */\nconst disposeSwal = (instance) => {\n  disposeWeakMaps(instance)\n  // Unset this.params so GC will dispose it (#1569)\n  delete instance.params\n  // Unset globalState props so GC will dispose globalState (#1569)\n  delete globalState.keydownHandler\n  delete globalState.keydownTarget\n  // Unset currentInstance\n  delete globalState.currentInstance\n}\n\n/**\n * @param {SweetAlert} instance\n */\nconst disposeWeakMaps = (instance) => {\n  // If the current instance is awaiting a promise result, we keep the privateMethods to call them once the promise result is retrieved #2335\n  if (instance.isAwaitingPromise) {\n    unsetWeakMaps(privateProps, instance)\n    instance.isAwaitingPromise = true\n  } else {\n    unsetWeakMaps(privateMethods, instance)\n    unsetWeakMaps(privateProps, instance)\n\n    delete instance.isAwaitingPromise\n    // Unset instance methods\n    delete instance.disableButtons\n    delete instance.enableButtons\n    delete instance.getInput\n    delete instance.disableInput\n    delete instance.enableInput\n    delete instance.hideLoading\n    delete instance.disableLoading\n    delete instance.showValidationMessage\n    delete instance.resetValidationMessage\n    delete instance.close\n    delete instance.closePopup\n    delete instance.closeModal\n    delete instance.closeToast\n    delete instance.rejectPromise\n    delete instance.update\n    delete instance._destroy\n  }\n}\n\n/**\n * @param {object} obj\n * @param {SweetAlert} instance\n */\nconst unsetWeakMaps = (obj, instance) => {\n  for (const i in obj) {\n    obj[i].delete(instance)\n  }\n}\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,mBAAmB;AAC3C,OAAOC,cAAc,MAAM,sBAAsB;AACjD,OAAOC,YAAY,MAAM,oBAAoB;;AAE7C;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAAA,EAAG;EACzB,MAAMC,QAAQ,GAAGF,YAAY,CAACE,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;EAChD,MAAMC,WAAW,GAAGJ,YAAY,CAACI,WAAW,CAACD,GAAG,CAAC,IAAI,CAAC;EAEtD,IAAI,CAACC,WAAW,EAAE;IAChBC,eAAe,CAAC,IAAI,CAAC,EAAC;IACtB,OAAM,CAAC;EACT;;EAEA;EACA,IAAIH,QAAQ,CAACI,KAAK,IAAIR,WAAW,CAACS,8BAA8B,EAAE;IAChET,WAAW,CAACS,8BAA8B,CAAC,CAAC;IAC5C,OAAOT,WAAW,CAACS,8BAA8B;EACnD;EAEA,IAAI,OAAOH,WAAW,CAACI,UAAU,KAAK,UAAU,EAAE;IAChDJ,WAAW,CAACI,UAAU,CAAC,CAAC;EAC1B;EACAC,WAAW,CAAC,IAAI,CAAC;AACnB;;AAEA;AACA;AACA;AACA,MAAMA,WAAW,GAAIC,QAAQ,IAAK;EAChCL,eAAe,CAACK,QAAQ,CAAC;EACzB;EACA,OAAOA,QAAQ,CAACC,MAAM;EACtB;EACA,OAAOb,WAAW,CAACc,cAAc;EACjC,OAAOd,WAAW,CAACe,aAAa;EAChC;EACA,OAAOf,WAAW,CAACgB,eAAe;AACpC,CAAC;;AAED;AACA;AACA;AACA,MAAMT,eAAe,GAAIK,QAAQ,IAAK;EACpC;EACA,IAAIA,QAAQ,CAACK,iBAAiB,EAAE;IAC9BC,aAAa,CAAChB,YAAY,EAAEU,QAAQ,CAAC;IACrCA,QAAQ,CAACK,iBAAiB,GAAG,IAAI;EACnC,CAAC,MAAM;IACLC,aAAa,CAACjB,cAAc,EAAEW,QAAQ,CAAC;IACvCM,aAAa,CAAChB,YAAY,EAAEU,QAAQ,CAAC;IAErC,OAAOA,QAAQ,CAACK,iBAAiB;IACjC;IACA,OAAOL,QAAQ,CAACO,cAAc;IAC9B,OAAOP,QAAQ,CAACQ,aAAa;IAC7B,OAAOR,QAAQ,CAACS,QAAQ;IACxB,OAAOT,QAAQ,CAACU,YAAY;IAC5B,OAAOV,QAAQ,CAACW,WAAW;IAC3B,OAAOX,QAAQ,CAACY,WAAW;IAC3B,OAAOZ,QAAQ,CAACa,cAAc;IAC9B,OAAOb,QAAQ,CAACc,qBAAqB;IACrC,OAAOd,QAAQ,CAACe,sBAAsB;IACtC,OAAOf,QAAQ,CAACgB,KAAK;IACrB,OAAOhB,QAAQ,CAACiB,UAAU;IAC1B,OAAOjB,QAAQ,CAACkB,UAAU;IAC1B,OAAOlB,QAAQ,CAACmB,UAAU;IAC1B,OAAOnB,QAAQ,CAACoB,aAAa;IAC7B,OAAOpB,QAAQ,CAACqB,MAAM;IACtB,OAAOrB,QAAQ,CAACT,QAAQ;EAC1B;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMe,aAAa,GAAGA,CAACgB,GAAG,EAAEtB,QAAQ,KAAK;EACvC,KAAK,MAAMuB,CAAC,IAAID,GAAG,EAAE;IACnBA,GAAG,CAACC,CAAC,CAAC,CAACC,MAAM,CAACxB,QAAQ,CAAC;EACzB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}